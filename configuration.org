#+TITLE: Le configuration
#+Author: Raiszo
#+STARTUP: indent

* Declare repositories
Small trick that was needed long ago for repositories on wsl to work correctly
#+begin_src emacs-lisp
(setq package-check-signature nil)
#+end_src


#+begin_src emacs-lisp
(require 'package)
;;Add melpa repository
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa-stable" . "http://stable.melpa.org/packages/")
			 ("melpa" . "http://melpa.org/packages/")))
#+end_src

* Platform specific
** OS conditional
Only darwin and gnu/linux are supported
#+begin_src emacs-lisp
;; Check if system is Darwin/macOS
(defun raiszo/my-system-type-is-darwin ()
  "Return true if system is darwin-based (Mac OS X)"
  (eq system-type 'darwin))
#+end_src
** darwin path $PATH loading
Correctly load $PATH and $MANPATH on OSX (GUI)
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :if (raiszo/my-system-type-is-darwin)
  :config
  (progn
    (setq exec-path-from-shell-arguments '("-l"))
    (setq mac-right-option-modifier 'none)
    (exec-path-from-shell-copy-env "LSP_USE_PLISTS")
    (exec-path-from-shell-initialize)))
#+end_src
** Disable s-t kbd on macos
#+begin_src emacs-lisp
(global-set-key (kbd "s-t") nil)
#+end_src
* vanilla config
** backups
#+begin_src emacs-lisp

;; (setq backup-directory-alist `(("." . "~/backups/emacs-saves")))
(setq backup-by-copying t)

#+end_src
* Appereance
** Transparent background
#+begin_src emacs-lisp
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
      (set-face-background 'default "unspecified-bg" (selected-frame))))

  (add-hook 'window-setup-hook 'on-after-init)

  ;; Setting transparency, not working like urxvt
  (set-frame-parameter (selected-frame) 'alpha '(85 85))
  (add-to-list 'default-frame-alist '(alpha 85 85))
#+end_src

** Disable default emacs appereance
More space in GUI mode :3
#+begin_src emacs-lisp
  ;; more space in GUI mode :D
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Theme
*** ef themes
#+begin_src emacs-lisp
(use-package ef-themes
  :ensure t
  :init
  (setq ef-themes-headings
	'((0 . (variable-pitch light 1.9))
	  (1 . (variable-pitch light 1.8))
	  (2 . (variable-pitch light 1.7))
	  (3 . (variable-pitch semilight 1.6))
	  (4 . (variable-pitch semilight 1.5))
	  (5 . (variable-pitch regular 1.4))
	  (6 . (variable-pitch regular 1.3))
	  (7 . (variable-pitch 1.2))
	  (t . (variable-pitch 1.1))))
  (load-theme 'ef-summer t))
  (if (raiszo/my-system-type-is-darwin)
      (progn
        (defun my/apply-theme (appearance)
          "Load theme, taking current system APPEARANCE into consideration."
          (mapc #'disable-theme custom-enabled-themes)
          (pcase appearance
            ('light (load-theme 'ef-summer t))
            ('dark (load-theme 'ef-day t))))

        (add-hook 'ns-system-appearance-change-functions #'my/apply-theme))
    (load-theme 'ef-autumn t)))
#+end_src
*** COMMENT doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :init
  ;; (load-theme 'doom-solarized-light t)
  ;; (load-theme 'doom-dracula t)
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  :config
  (progn
    ;; (doom-themes-treemacs-config)
    (doom-themes-org-config)))
#+end_src
** Font
Having mixed fonts in a single buffer causes the function ~text-scale-adjust~ to behave strangely, only adjusting the default face
According to [[https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/][this post]] by Protesilaos, we should not specify a specific size for each face (:inherit I'm looking at you).
Specifying a ~:height~ relative to the default fixes it.
#+begin_src emacs-lisp
(if (raiszo/my-system-type-is-darwin)
    (progn
      (set-face-attribute 'default nil :family "Fira Code" :height 135)
      ;; (custom-set-faces
      ;;  '(font-lock-function-name-face ((t (:inherit default :slant italic :font "Fira Code iScript" :height 1.0)))))
      )
  (progn
    (set-face-attribute 'default nil :family "Cascadia Code" :height 110)
    (set-face-attribute 'italic nil :family "Cascadia Code" :height 110 :slant 'italic :underline nil)))

#+end_src

** Ligatures settings
#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :if (not (raiszo/my-system-type-is-darwin))
    :config
    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))

    ;; Enable ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
					 ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
					 "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
					 ;; the next one seems to be the culprit that breaks in python with lsp+doom-modeline
					 ;; "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
					 "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
					 "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
					 "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
					 "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
					 "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
					 "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
    (global-ligature-mode 't))
#+end_src
** Font config
#+begin_src emacs-lisp
(when (raiszo/my-system-type-is-darwin)
  (when (window-system)
    (set-frame-font "Fira Code"))
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
		 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
		 (36 . ".\\(?:>\\)")
		 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
		 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
		 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
		 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
		 ;; (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
		 ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
		 ;; (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
		 (48 . ".\\(?:x[a-zA-Z]\\)")
		 (58 . ".\\(?:::\\|[:=]\\)")
		 (59 . ".\\(?:;;\\|;\\)")
		 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
		 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
		 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
		 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
		 (91 . ".\\(?:]\\)")
		 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
		 (94 . ".\\(?:=\\)")
		 (119 . ".\\(?:ww\\)")
		 (123 . ".\\(?:-\\)")
		 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
		 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
		 )
	       ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
			    `([,(cdr char-regexp) 0 font-shape-gstring]))))
)
#+end_src

** Line number
#+begin_src emacs-lisp
(use-package display-line-numbers
  :ensure nil
  :config
  (set-face-attribute 'line-number-current-line nil
		      :background "#7fffd4"
		      :foreground "black"
		      :weight 'bold)
  :hook
  ((prog-mode yaml-mode systemd-mode) . display-line-numbers-mode))
#+end_src

** Indentation guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook ((prog-mode yaml-mode nxml-mode) . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (highlight-indent-guides-mode 1))
#+end_src

** nyan
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode 1)
    (nyan-start-animation)
    (nyan-toggle-wavy-trail)
    :hook
    (doom-modeline-mode . nyan-mode))
#+end_src

** COMMENT bongo-cat
#+begin_src emacs-lisp
  (use-package bongocat
    :load-path "~/.emacs.d/bongocat-mode")
    ;; :config
    ;; (bongocat-mode))
#+end_src

** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-minor-modes nil);
  (inhibit-compacting-font-caches t)
  :init
  (doom-modeline-mode 1)
  :config
  (set-cursor-color "cyan"))
#+end_src

** COMMENT telephone-line
#+begin_src emacs-lisp
(use-package telephone-line
  :ensure t
  :config
  (defface my-indianRed '((t (:foreground "white" :background "IndianRed1"))) "")
  (defface my-gold '((t (:foreground "black" :background "gold"))) "")
  (setq telephone-line-faces
	'((indianGold . (my-gold . my-indianRed))
	  (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
	  (nil . (mode-line . mode-line-inactive))))
  (setq telephone-line-lhs
	'((indianGold . (telephone-line-vc-segment
			 telephone-line-erc-modified-channels-segment
			 telephone-line-process-segment))
	  (nil . (telephone-line-major-mode-segment
		  telephone-line-buffer-segment))
	  ;; when splitting the window it gets trimmed to 1 ;'v
	  ;; refer to this issue https://github.com/dbordak/telephone-line/issues/41
	  (nil . (telephone-line-nyan-segment))
	  ))
  (setq telephone-line-rhs
	'((nil . (telephone-line-misc-info-segment))
	  (accent . (telephone-line-minor-mode-segment))
	  (indianGold . (telephone-line-airline-position-segment))
	  ))
  (telephone-line-mode 1))
#+end_src

** Dashboard
Kul dashboard with a custom image: eva <3
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-items '((recents . 3)
			    (projects . 3)))
    (setq dashboard-center-content t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/images/wille.png")
    )
  :config
  (dashboard-setup-startup-hook))
#+end_src

** COMMENT rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((python-ts-mode . rainbow-delimiters-mode)
	 (emacs-lisp-mode . rainbow-delimiters-mode)))
#+end_src

** rainbow-mode
#+begin_src emacs-lisp
  ;; (use-package rainbow-mode
  ;;   :diminish
  ;;   :hook (emacs-lisp-mode . rainbow-mode))
#+end_src

** COMMENT dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :disabled
    :custom
    (dimmer-fraction 0.5)
    (dimmer-exclusion-regexp-list
     '(".*Minibuf.*"
       ".*which-key.*"
       ".*Treemacs.*"
       ".*Messages.*"
       ".*Async.*"
       ".*Warnings.*"
       ".*LV.*"
       ".*Ilist.*"))
    :config
    (dimmer-mode t))
#+end_src

** Ansi support in emacs special buffers
*** compilation
as suggested by https://github.com/emacs-typescript/typescript.el#support-for-compilation-mode
#+begin_src emacs-lisp
;;;; colorize output in compile buffer
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (ansi-color-apply-on-region compilation-filter-start (point-max)))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
* General stuff
emacs native stuff
#+begin_src emacs-lisp
(show-paren-mode)
(electric-pair-mode)
(global-hl-line-mode +1)
#+end_src

#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)))
#+end_src

#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :config
    (add-hook 'ibuffer-hook
	      (lambda ()
		(ibuffer-projectile-set-filter-groups)
		(unless (eq ibuffer-sorting-mode 'alphabetic)
		  (ibuffer-do-sort-by-alphabetic)))))
#+end_src

* Code navigation
** Ace jump
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-'" . 'avy-goto-char-2)))
#+end_src

** ace window
The solution to not have problems when using package from html modes is here https://emacs.stackexchange.com/questions/75204/stop-later-modes-from-clobbering-a-global-keybinding

#+begin_src emacs-lisp
(use-package ace-window
  :demand t
  :ensure t
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  ;; (setq aw-dispatch-always t)
  :bind* ("M-o" . ace-window))
#+end_src
** Other stuff
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1)
  :custom
  (undo-tree-auto-save-history nil))

  (use-package multiple-cursors
  :ensure t
  :bind (("C-c C-v" . 'mc/edit-lines)
	 ("C->" . 'mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
	 ("C-c C-q" . mc/mark-all-like-this)))

(use-package zoom-window
  :ensure t
  :bind ("C-x 4" . zoom-window-zoom)
  :custom
  (zoom-window-mode-line-color "DarkViolet" "Distinctive color when using zoom"))

(use-package beacon
  :ensure t
  :custom
  (beacon-color "#f1fa8c")
  :hook (prog-mode . beacon-mode))
#+end_src

* Programming utilities
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-load-directory "~/.emacs.d/snippets")
    (yas-reload-all))
#+end_src
** expand-region
#+begin_src emacs-lisp
(defun raiszo/tree-sitter-mark-bigger-node ()
  (interactive)
  (let* ((root (tsc-root-node tree-sitter-tree))
         (node (tsc-get-descendant-for-position-range root (region-beginning) (region-end)))
         (node-start (tsc-node-start-position node))
         (node-end (tsc-node-end-position node)))
    ;; Node fits the region exactly. Try its parent node instead.
    (when (and (= (region-beginning) node-start) (= (region-end) node-end))
      (when-let ((node (tsc-get-parent node)))
        (setq node-start (tsc-node-start-position node)
              node-end (tsc-node-end-position node))))
    (set-mark node-end)
    (goto-char node-start)))

(defun raiszo/add-tree-sitter-mode-expansions ()
  (set (make-local-variable 'er/try-expand-list) (append
                                                  er/try-expand-list
                                                  '(raiszo/tree-sitter-mark-bigger-node))))

(use-package expand-region
  :ensure t
  :bind ("C-=" . 'er/expand-region))
#+end_src

** git
*** magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("<f5>" . magit-status))
#+end_src
*** browse at remote
Open a file under git vc in the browser
#+begin_src emacs-lisp
(use-package browse-at-remote
  :ensure t
  :bind ("C-c g g" . browse-at-remote))
#+end_src

** COMMENT search
after upgrading to the lates emacs29 (march 22) this seems to be broken, it justs prints a message [target window is deleted]
#+begin_src emacs-lisp
(use-package phi-search
  :ensure t
  :bind (("C-s" . phi-search)
	 ("C-r" . phi-search-backward)))
#+end_src

** helm
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :init
  (add-hook 'helm-mode-hook
	    (lambda ()
	      (setq completion-styles
		    (cond ((assq 'helm-flex completion-styles-alist)
			   '(helm-flex))))))
  :bind (("M-x" . helm-M-x)
	 ("C-x b" . helm-buffers-list)
	 ("C-x C-f" . helm-find-files))
  :config
  ;; (bind-keys :map helm-map
  ;; 	     ("TAB" . helm-execute-persistent-action))
  (setq helm-split-window-in-side-p t)
  (helm-autoresize-mode 1)
  (setq helm-autoresize-max-height 20)
  (helm-mode 1))

(use-package helm-ag
  :ensure t)

;; (use-package helm-posframe
;;   :ensure t
;;   :config
;;   (setq helm-posframe-poshandler 'posframe-poshandler-frame-center
;; 	helm-posframe-border-width 1
;;         helm-posframe-height 20
;;         helm-posframe-width (round (* (frame-width) 0.49))
;;         helm-posframe-parameters '((internal-border-width . 10)))
;;   (helm-posframe-enable))
#+end_src

** amx
For better history in helm
#+begin_src emacs-lisp
(use-package amx
  :ensure t
  :after helm
  :bind (("M-x" . amx))
  :custom
  (amx-history-length 50)
  :config
  (setq amx-backend 'helm)
  (amx-mode 1))
#+end_src

** COMMENT treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  :bind
  (:map global-map
	("<f8>" . treemacs))
  :config
  (progn
    (setq treemacs-width 25)))

(use-package treemacs-projectile
  :ensure t
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src

** drag-stuff
#+begin_src emacs-lisp
(use-package drag-stuff
  :ensure t
  :init
  (setq drag-stuff-mode t)
  :config
  (drag-stuff-define-keys))
#+end_src

** terminal
#+begin_src emacs-lisp
(use-package vterm
  :ensure t)

(use-package multi-vterm
  :after vterm
  :ensure t)
#+end_src

** Editorconfig
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

* Projects
** projectile
*** config
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+end_src

*** helm projectile integration
#+begin_src emacs-lisp
(use-package helm-projectile
  :ensure t
  :after projectile helm perspective
  :config
  (define-key projectile-mode-map [remap projectile-find-other-file] #'helm-projectile-find-other-file)
  (define-key projectile-mode-map [remap projectile-find-file] #'helm-projectile-find-file)
  (define-key projectile-mode-map [remap projectile-find-file-in-known-projects] #'helm-projectile-find-file-in-known-projects)
  (define-key projectile-mode-map [remap projectile-find-file-dwim] #'helm-projectile-find-file-dwim)
  (define-key projectile-mode-map [remap projectile-find-dir] #'helm-projectile-find-dir)
  (define-key projectile-mode-map [remap projectile-recentf] #'helm-projectile-recentf)
  (define-key projectile-mode-map [remap projectile-switch-to-buffer] #'helm-projectile-switch-to-buffer)
  (define-key projectile-mode-map [remap projectile-grep] #'helm-projectile-grep)
  (define-key projectile-mode-map [remap projectile-ack] #'helm-projectile-ack)
  (define-key projectile-mode-map [remap projectile-ag] #'helm-projectile-ag)
  (define-key projectile-mode-map [remap projectile-ripgrep] #'helm-projectile-rg)
  (define-key projectile-mode-map [remap projectile-browse-dirty-projects] #'helm-projectile-browse-dirty-projects)
  (helm-projectile-commander-bindings))
#+end_src

** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :custom
    (persp-mode-prefix-key (kbd "C-x x"))
    :init
    (persp-mode))

  (use-package persp-projectile
    :ensure t
    :after perspective
    :config
    (define-key projectile-mode-map (kbd "C-c p p") 'projectile-persp-switch-project))
#+end_src

* IDE features
** LSP
#+begin_src emacs-lisp
  ;; LSP mode config
  (use-package flycheck
    :ensure t)

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
    (lsp-idle-delay 0.200)
    ;; (lsp-rust-server 'rust-analyzer)
    ;; (lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (setq lsp-enable-indentation nil)
    (setq lsp-enable-snippet t)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-completion-use-last-result t)
    (setq lsp-clients-typescript-max-ts-server-memory 3072)
    (setq read-process-output-max (* 1024 1024 8)) ;; 1mb
    (setq lsp-file-watch-threshold 2000)
    (dolist (dir '(
                   "[/\\\\]\\.venv$"
                   "[/\\\\]cdk.out$"
                   "[/\\\\]\\.mypy_cache$"
                   "[/\\\\]__pycache__$"
                   ;; tsserver log folder
                   "[/\\\\]\\.log$"
                   "[/\\\\]\\.tmp"
                   ))
      (push dir lsp-file-watch-ignored-directories))
    :hook ((dockerfile-mode
            sh-mode
            ) . lsp-deferred))

  ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
  (setq gc-cons-threshold (* 1024 1024 256))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-show-with-mouse t)
    (lsp-ui-doc-delay 0.5)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature nil)
    (lsp-ui-doc-position 'at-point) ;; top, bottom, or at-point
    (lsp-ui-doc-max-width 120)
    (lsp-ui-doc-max-height 30)
    (lsp-ui-doc-use-childframe t)
    (lsp-ui-doc-use-webkit t)
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable nil)
    (lsp-ui-imenu-kind-position 'top)
    :hook
    (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (setq lsp-ui-sideline-enable nil))

  ;; (use-package lsp-treemacs
  ;;   :ensure t
  ;;   :defer t
  ;;   :commands lsp-treemacs-errors-list
  ;;   :init
  ;;   (lsp-treemacs-sync-mode 1))

  (use-package company
    :ensure t
    :defer t
    ;; :init (global-company-mode)
    :diminish company-mode
    :config
    (progn
      (setq company-tooltip-align-annotations t
            ;; Easy navigation to candidates with M-<n>
            company-show-numbers t)
      (setq company-dabbrev-downcase nil))
    :custom
    (company-idle-delay 0.3)
    (company-echo-delay 0)
    (company-minimum-prefix-length 2))
  (use-package company-quickhelp          ; Documentation popups for Company
    :ensure t
    :defer t
    :hook (global-company-mode . company-quickhelp-mode))
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
  (use-package company-posframe
    :diminish
    :ensure t
    :hook (company-mode . company-posframe-mode))
#+end_src
** compilation
#+begin_src emacs-lisp
(setq compile-command "npm run build")
#+end_src
* Tree sitter
Built in tree sitter is prefered
#+begin_src emacs-lisp
(use-package treesit
  :when (and (fboundp 'treesit-available-p)
             (treesit-available-p))
  :custom (major-mode-remap-alist
           '((javascript-mode . js-ts-mode)
             (js-json-mode    . json-ts-mode)
             (python-mode     . python-ts-mode))))
             ;; (sh-mode         . bash-ts-mode)

(setq treesit-language-source-alist
   '((astro "https://github.com/virchau13/tree-sitter-astro")
     (bash "https://github.com/tree-sitter/tree-sitter-bash")
     (c "https://github.com/tree-sitter/tree-sitter-c")
     ;; (cmake "https://github.com/uyha/tree-sitter-cmake")
     (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (java "https://github.com/tree-sitter/tree-sitter-java")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "v0.21.1" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

;; (use-package tree-sitter-langs
;;   :ensure t
;;   :after tree-sitter)
#+end_src
* Languages
** Env files
#+begin_src emacs-lisp
(use-package dotenv-mode
  :mode ("\\.env\\'")
  :ensure t)
#+end_src
** git files
#+begin_src emacs-lisp
(use-package git-modes
  :ensure t)
#+end_src
** javascript & typescript
#+begin_src emacs-lisp
(use-package js
  :hook (js-ts-mode . (lambda () (setq tab-width 4)))
  :mode ("\\.mjs\\'" . js-ts-mode))

(use-package typescript-ts-mode
  :hook (typescript-ts-mode . (lambda () (setq tab-width 4)))
  :custom
  (typescript-ts-mode-indent-offset 4))

(use-package prettier
  :ensure t)
#+end_src
** COMMENT typescript
#+begin_src emacs-lisp
(defun my-typescript-ts-mode--indent-rules (language)
  "Rules used for indentation.
Argument LANGUAGE is either `typescript' or `tsx'."
  `((,language
     ((parent-is "program") column-0 0)
     ((node-is "}") parent-bol 0)
     ((node-is ")") parent-bol 0)
     ((node-is "]") parent-bol 0)
     ((node-is ">") parent-bol 0)

     ;; this works for
     ;; type A = null
     ;;   | string
     ;;   | number
     ;; does not work for
     ;; type A =
     ;; | string
     ;; | number
     ((parent-is "type_alias_declaration") parent-bol typescript-ts-mode-indent-offset)
     ;; indentar "parent-bol 0" si es el primer nodo en su linea
     ;; de lo contrario usar "parent-bol typescript-ts-mode-indent-offset"
     ;; pero como hacer esto???
     ((parent-is "union_type") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "intersection_type") parent-bol typescript-ts-mode-indent-offset)

     ((and (parent-is "comment") c-ts-common-looking-at-star)
      c-ts-common-comment-start-after-first-star -1)
     ((parent-is "comment") prev-adaptive-prefix 0)
     ((parent-is "ternary_expression") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "member_expression") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "named_imports") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "statement_block") parent-bol typescript-ts-mode-indent-offset)

	 ;; to indent case "CASE": one level from parent
	 ((parent-is "switch_body") parent-bol typescript-ts-mode-indent-offset)

     ((parent-is "switch_case") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "switch_default") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "type_arguments") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "variable_declarator") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "arguments") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "array") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "formal_parameters") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "template_string") no-indent) ; Don't indent the string contents.
     ((parent-is "template_substitution") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "object_pattern") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "object") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "object_type") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "enum_body") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "class_body") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "interface_body") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "arrow_function") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "parenthesized_expression") parent-bol typescript-ts-mode-indent-offset)
     ((parent-is "binary_expression") parent-bol typescript-ts-mode-indent-offset)

     ,@(when (eq language 'tsx)
         `(((match "<" "jsx_fragment") parent 0)
           ((parent-is "jsx_fragment") parent typescript-ts-mode-indent-offset)
           ((node-is "jsx_closing_element") parent 0)
           ((match "jsx_element" "statement") parent typescript-ts-mode-indent-offset)
           ((parent-is "jsx_element") parent typescript-ts-mode-indent-offset)
           ((parent-is "jsx_text") parent-bol typescript-ts-mode-indent-offset)
           ((parent-is "jsx_opening_element") parent typescript-ts-mode-indent-offset)
           ((parent-is "jsx_expression") parent-bol typescript-ts-mode-indent-offset)
           ((match "/" "jsx_self_closing_element") parent 0)
           ((parent-is "jsx_self_closing_element") parent typescript-ts-mode-indent-offset)))
     ;; FIXME(Theo): This no-node catch-all should be removed.  When is it needed?
     (no-node parent-bol 0))))

#+end_src

** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-ts-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp)))  ; or lsp-deferred
  :init
  (when (executable-find "python3")
    (setq lsp-pyright-python-executable-cmd "python3.12"))
  (setq lsp-pyright-multi-root nil)
  (setq lsp-pyright-disable-organize-imports nil))

#+end_src

** markup
*** web
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.svelte\\'" "\\.vue\\'")
  :custom
  (web-mode-markup-indent-offset 2))
#+end_src

*** astro
#+begin_src emacs-lisp
(use-package astro-ts-mode
  :ensure t
  :hook (astro-ts-mode . (lambda () (setq tab-width 2)))
  :mode ("\\.astro\\'")
  :init
  (setq astro-ts-mode-indent-offset 4))
#+end_src
** json
#+begin_src emacs-lisp
(use-package json-ts-mode
  :config
  (setq json-ts-mode-indent-offset 4)
  (add-hook 'json-ts-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil))))
#+end_src

** restclient
#+begin_src emacs-lisp
(use-package edit-indirect
  :ensure t)

(use-package restclient
  :ensure t
  :after edit-indirect
  :config
  ;; (add-to-list 'restclient-content-type-modes '("application/json" . json-ts-mode))
  ;; for some reason restclient can't use json-mode-pretty-buffer on json-ts-mode

  ;; hardcoded to json-ts-mode, before adopting native tree-sitter integration
  ;; normal-mode would get the correct mode, weird
  (setq edit-indirect-guess-mode-function (lambda (_parent-buffer _beg _end) (json-ts-mode)))
  (defun my-restclient-indirect-edit ()
    "Use `edit-indirect-region' to edit the request body in a
separate buffer."
    (interactive)
    (save-excursion
      (goto-char (restclient-current-min))
      (when (re-search-forward restclient-method-url-regexp (point-max) t)
	(forward-line)
	(while (cond
		((and (looking-at restclient-header-regexp) (not (looking-at restclient-empty-line-regexp))))
		((looking-at restclient-use-var-regexp)))
	  (forward-line))
	(when (looking-at restclient-empty-line-regexp)
	  (forward-line))
	(edit-indirect-region (min (point) (restclient-current-max)) (restclient-current-max) t))))
  :bind ("C-c '" . my-restclient-indirect-edit)
  :mode (("\\.http$" . restclient-mode)))
#+end_src

** yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode ("\\.yaml\\'" "\\.yml\\'" "\\.config\\'")
  :config
  (setq yaml-indent-offset 4)
  :custom-face
  (font-lock-variable-name-face ((t (:foreground "violet")))))
#+end_src

** node
#+begin_src emacs-lisp
(use-package nvm
  :ensure t
  :config
  (nvm-use "v20.16"))

;; repl
(use-package nodejs-repl
  :ensure t)
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+end_src

** elasticsearch
#+begin_src emacs-lisp
(use-package es-mode
  :ensure t
  :mode (("\\.es$" . es-mode)))
#+end_src

** nginx
#+begin_src emacs-lisp
(use-package nginx-mode
  :ensure t)
#+end_src

** docker
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t)

(use-package docker
  :ensure t
  :bind ("C-c d" . docker))

(use-package docker-compose-mode
  :mode ("docker-compose.yaml\\'")
  :ensure t)
#+end_src

** gleam
#+begin_src emacs-lisp
(use-package gleam-ts-mode
  :ensure t
  :mode (rx ".gleam" eos))
#+end_src

** COMMENT go
#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :custom (gofmt-command "goimports")
  :config
  (add-hook 'before-save-hook #'gofmt-before-save)
  (use-package gotest
    :ensure t)
  (use-package go-tag
    :ensure t
    :config (setq go-tag-args (list "-transform"))))
#+end_src

** COMMENT elixir
#+begin_src emacs-lisp
(use-package elixir-mode
  :ensure t)
#+end_src

** COMMENT PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure t
  :custom
  (plantuml-indent-level 4)
  :hook
  (plantuml-mode . (lambda () (indent-tabs-mode nil))))
#+end_src
** COMMENT Rust
There is also rustic available, but I want to use it when I feel like I need its extra features
#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :init
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil))))
#+end_src
** swift
#+begin_src emacs-lisp
(use-package swift-ts-mode
  :ensure t
  :hook (swift-ts-mode . (lambda () (setq tab-width 4)))
  :config
  (add-to-list 'lsp-language-id-configuration '(swift-ts-mode . "swift")))
(use-package lsp-sourcekit
  :ensure t
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable "~/.local/share/swiftly/toolchains/6.0.1/usr/bin/sourcekit-lsp"))
#+end_src
* Org-mode
** General config
#+begin_src emacs-lisp
;; could add company-emoji to insert unicode characters that would transpile well when exporting
;; but for some reason company completion list just crashes, so, would search for something like
;; https://stackoverflow.com/questions/36233605/how-to-customize-org-mode-html-output-to-replace-emojis
;; :hook (org-mode . (lambda ()
;; 		      ;; (make-local-variable 'company-backends)))
;; 		      (delete 'company-semantic (add-to-list (make-local-variable 'company-backends) 'company-emoji))))
(use-package org
  :after ef-themes
  :config
  (setq org-image-actual-width nil)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation t)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (setq org-startup-indented t)
  (setq org-latex-prefer-user-labels t)
  (setq org-latex-pdf-process
	'("%latex -interaction nonstopmode -output-directory %o %f"
	  "%bibtex %b"
	  "%latex -interaction nonstopmode -output-directory %o %f"
	  "%latex -interaction nonstopmode -output-directory %o %f"))
  (defun org-latex-math-block (_math-block contents _info)
    "Transcode a MATH-BLOCK object from Org to LaTeX.
CONTENTS is a string.  INFO is a plist used as a communication
channel."
    (when (org-string-nw-p contents)
      (format "$%s$" (org-trim contents))))
  :custom-face
  (org-table ((t (:inherit (shadow fixed-pitch))))))
#+end_src

** org babel packages
#+begin_src emacs-lisp
(use-package ob-restclient
  :ensure t)
(use-package ob-mongo
  :ensure t
  :custom
  (ob-mongo:default-host "localhost")
  (ob-mongo:default-port "27017")
  (ob-mongo:default-mongo-executable "mongosh"))
#+end_src
** org babel config
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((lisp . t)
   (C . t)
   (emacs-lisp . t)
   (mongo . t)
   (restclient . t)
   (latex . t)))
(setq org-confirm-babel-evaluate nil)
(setq org-src-window-setup 'other-window)
#+end_src
*** COMMENT org-roam
To have project specific roam notes declare a local variable as suggested [[https://www.orgroam.com/manual.html#How-do-I-have-more-than-one-Org_002droam-directory_003f][here]].
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :config
  (setq org-roam-capture-templates
	'(;; bibliography note template
          ("b" "bibliography reference" plain "%?"
           :target
           (file+head "${citekey}.org" "#+title: ${title}\n")
           :unnarrowed t))))
#+end_src
** Presentation
#+begin_src emacs-lisp
(defun my/org-present-start ()
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 2.5) variable-pitch)
                                     (header-line (:height 8.0) variable-pitch)
                                     (org-document-title (:height 2.75) org-document-title)
                                     ;; (org-code (:height 1.55) org-code)
                                     ;; (org-verbatim (:height 1.55) org-verbatim)
                                     ;; (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (setq-local face-remapping-alist '((default)))
  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

(use-package visual-fill-column
  :ensure t
  :init
  (setq visual-fill-column-width 200)
  (setq visual-fill-column-center-text t))

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(use-package org-present
  :ensure t
  :init
  (add-hook 'org-present-mode-hook 'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide))
#+end_src
** Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src

** Exports
*** org-reveal for presentations
#+begin_src emacs-lisp
(use-package ox-reveal
  :ensure t)
#+end_src
** COMMENT Scientific writing
To reference from bibtex file:
#+begin_src emacs-lisp
(use-package helm-bibtex
  :ensure t)
(use-package org-ref
  :ensure t
  ;; :bind (("C-c ]" . org-ref-insert-link)
  ;; 	 ("C-u c ]" . org-ref-)))
  :bind ("C-c ]" . org-ref-insert-link)
  :init
  (require 'bibtex)
  (require 'org-ref-helm))
(use-package org-ref-helm
  :ensure nil
  :after org-ref
  :init
  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	org-ref-insert-cite-function 'org-ref-cite-insert-helm
	org-ref-insert-label-function 'org-ref-insert-label-link
	org-ref-insert-ref-function 'org-ref-insert-ref-link
	org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))

;; this only works in linux
;; (define-prefix-command 'my-menu-key-map)
;; (global-set-key (kbd "<menu>") 'my-menu-key-map)
;; Nice helm popup when referencing
  ;; :bind ("<menu> b" . helm-bibtex-with-local-bibliography))
#+end_src
If apa6 is needed take a look at [[https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/][this]] blog.
*** COMMENT roam-bibtex
#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :after org-roam
  :config
  :hook (org-mode . (lambda () (org-roam-bibtex-mode 1)))
  :ensure t)
#+end_src

*** Web of Conferences template
#+begin_src emacs-lisp
(add-to-list 'org-latex-classes
             '("webofc-journal"
	       "\\documentclass{webofc}
[NO-DEFAULT-PACKAGES]
[EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
             )
#+end_src

* Misc
** Icons :3
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

** COMMENT Emojis :3
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode)
    :config
    (setq emojify-user-emojis
	  '((":trollface:" . (("name" . "Troll Face")
			      ("image" . "~/.emacs.d/emojis/custom/trollface.png")
			      ("style" . "github")))
	    (":kappa:" . (("name". "Kappa")
			  ("image" . "~/.emacs.d/emojis/custom/kappa.png")
			  ("style" . "github")))
	    ))
    (when (featurep 'emojify)
      (emojify-set-emoji-data))
    (emojify-mode-line-mode 1))
#+end_src

** COMMENT Presentation
Would want the fullscreen and property hiding features of epresent with the extensibility of org-tree-slide.
#+begin_src emacs-lisp
;; check https://github.com/takaxp/org-tree-slide/issues/13#issuecomment-251139782

(use-package hide-lines
  :ensure t)

(defun raiszo/presentation-start ()
  ;; (hide-lines-show-all)
  (setq text-scale-mode-amount 5)
  (org-display-inline-images)
  (beacon-mode 0)
  (text-scale-mode 1))

(defun raiszo/presentation-end ()
  ;; (hide-lines-matching "#\\+BEGIN_SRC")
  ;; (hide-lines-matching "#\\+END_SRC")
  (beacon-mode 1)
  (text-scale-mode 0))

(use-package org-tree-slide
  :ensure t
  :bind (("<f12>" . org-tree-slide-mode))
  :custom (org-tree-slide-modeline-display nil)
  :hook ((org-tree-slide-play . raiszo/presentation-start)
	 (org-tree-slide-stop . raiszo/presentation-end)))

#+end_src
* Tools
** Google translate
   #+begin_src emacs-lisp
     (use-package google-translate
       :ensure t
       ;; :bind
       ;; ("M-o t" . google-translate-at-point)
       ;; ("M-o T" . google-translate-at-point-reverse)
       :custom
       (google-translate-default-source-language "en")
       (google-translate-default-target-language "es"))

     (use-package google-translate-default-ui
       :ensure f
       :after google-translate)
   #+end_src

** Net utilities

   #+begin_src emacs-lisp
     (setq ping-program-options '("-c" "4"))
   #+end_src

* Advanced configuration
** TLS
Knowing that self signed certificates will be used, we need to add them to
gnutls-trustfiles to not get weird errors when using e.g. restclient
#+begin_src emacs-lisp
  (require 'gnutls)

  ;; tip from https://blog.vifortech.com/posts/emacs-tls-fix/
  (when (raiszo/my-system-type-is-darwin)
    (add-to-list 'gnutls-trustfiles "/Users/raiszo/Library/Application Support/mkcert/rootCA.pem"))

  ;; (setq gnutls-verify-error t)

  ;; suggestion from: https://github.com/pashky/restclient.el/issues/212
  ;; (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src
